{{- if .Values.microservices.requester.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "grafana-mltp-stack.fullname" . }}-mythical-requester
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
  labels:
    {{- include "grafana-mltp-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: mythical-requester
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "grafana-mltp-stack.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: mythical-requester
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/alloy-configmap.yaml") . | sha256sum }}
      labels:
        {{- include "grafana-mltp-stack.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: mythical-requester
    spec:
      serviceAccountName: {{ include "grafana-mltp-stack.serviceAccountName" . }}
      {{- include "grafana-mltp-stack.podSecurityContext" . | nindent 6 }}
      initContainers:
        - name: wait-for-server
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              until nslookup {{ include "grafana-mltp-stack.fullname" . }}-mythical-server.{{ .Values.global.namespace }}.svc.cluster.local; do
                echo "Waiting for mythical-server to be ready..."
                sleep 2
              done
              echo "Mythical server is ready!"
        - name: wait-for-rabbitmq
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              until nc -z mythical-queue.{{ .Values.global.namespace }}.svc.cluster.local {{ .Values.infrastructure.rabbitmq.ports.amqp }}; do
                echo "Waiting for RabbitMQ to be ready..."
                sleep 2
              done
              echo "RabbitMQ is ready!"
      containers:
        - name: mythical-requester
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
          {{- if .Values.development.mode }}
          # Development mode: use local built images
          image: "{{ .Values.microservices.requester.image.repository }}:{{ .Values.microservices.requester.image.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.microservices.requester.image.pullPolicy | default "Never" }}
          {{- else }}
          # Production mode: use registry images
          image: "{{ .Values.microservices.requester.image.repository }}:{{ .Values.microservices.requester.image.tag }}"
          imagePullPolicy: {{ .Values.microservices.requester.image.pullPolicy }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.microservices.requester.ports.http }}
              protocol: TCP
          envFrom:
            # Load non-sensitive environment variables from ConfigMap
            - configMapRef:
                name: {{ include "grafana-mltp-stack.fullname" . }}-microservices-env
            # Load sensitive environment variables from Secrets
            - secretRef:
                name: {{ include "grafana-mltp-stack.fullname" . }}-rabbitmq-secret
          env:
            # Special environment variables that need dynamic values
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "ip=$(POD_IP)"
          livenessProbe:
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.microservices.requester.resources | nindent 12 }}
      {{- with .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
