{{- if .Values.observability.alloy.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "grafana-mltp-stack.fullname" . }}-alloy-config
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
  labels:
    {{- include "grafana-mltp-stack.labels" . | nindent 4 }}
    {{- include "grafana-mltp-stack.componentLabels" "alloy" | nindent 4 }}
data:
  config.alloy: |
    {{- if and .Values.configOverrides.alloy (ne .Values.configOverrides.alloy "") }}
    {{- .Values.configOverrides.alloy | nindent 4 }}
    {{- else }}
    // Telemetry Configuration
    otelcol.receiver.otlp "mythical" {
        grpc {
            endpoint = "0.0.0.0:4317"
        }
        http {
            endpoint = "0.0.0.0:4318"
        }
        output {
            metrics = [otelcol.processor.batch.default.input]
            logs    = [otelcol.processor.batch.default.input]
            traces  = [otelcol.processor.batch.default.input]
        }
    }

    otelcol.processor.batch "default" {
        output {
            metrics = [otelcol.exporter.prometheus.mimir.input]
            logs    = [otelcol.exporter.loki.loki.input]
            traces  = [otelcol.exporter.otlp.tempo.input]
        }
    }

    // Metrics Export to Mimir
    otelcol.exporter.prometheus "mimir" {
        forward_to = [prometheus.remote_write.mimir.receiver]
    }

    prometheus.remote_write "mimir" {
        endpoint {
            url = "http://{{ include "grafana-mltp-stack.fullname" . }}-mimir:9009/api/v1/push"
        }
    }

    // Logs Export to Loki
    otelcol.exporter.loki "loki" {
        forward_to = [loki.write.loki.receiver]
    }

    loki.write "loki" {
        endpoint {
            url = "http://{{ include "grafana-mltp-stack.fullname" . }}-loki:3100/loki/api/v1/push"
        }
    }

    // Traces Export to Tempo
    otelcol.exporter.otlp "tempo" {
        client {
            endpoint = "http://{{ include "grafana-mltp-stack.fullname" . }}-tempo:4317"
            tls {
                insecure = true
            }
        }
    }

    // Scrape infrastructure metrics
    prometheus.scrape "infrastructure" {
        targets = [
            {"__address__" = "{{ include "grafana-mltp-stack.fullname" . }}-alloy:12345", group = "infrastructure", service = "alloy"},
            {"__address__" = "{{ include "grafana-mltp-stack.fullname" . }}-tempo:3200", group = "infrastructure", service = "tempo"},
            {"__address__" = "{{ include "grafana-mltp-stack.fullname" . }}-loki:3100", group = "infrastructure", service = "loki"},
            {"__address__" = "{{ include "grafana-mltp-stack.fullname" . }}-mimir:9009", group = "infrastructure", service = "mimir"},
            {"__address__" = "{{ include "grafana-mltp-stack.fullname" . }}-pyroscope:4040", group = "infrastructure", service = "pyroscope"},
            {"__address__" = "{{ include "grafana-mltp-stack.fullname" . }}-grafana:3000", group = "infrastructure", service = "grafana"},
        ]
        scrape_interval = "15s"
        forward_to = [prometheus.remote_write.mimir.receiver]
        job_name = "mltpg_infra"
    }

    // Scrape mythical application metrics
    prometheus.scrape "mythical" {
        targets = [
            {"__address__" = "{{ include "grafana-mltp-stack.fullname" . }}-mythical-server:4000", group = "mythical", service = "mythical-server"},
            {"__address__" = "{{ include "grafana-mltp-stack.fullname" . }}-mythical-requester:4001", group = "mythical", service = "mythical-requester"},
            {"__address__" = "{{ include "grafana-mltp-stack.fullname" . }}-mythical-recorder:4002", group = "mythical", service = "mythical-recorder"},
        ]
        scrape_interval = "2s"
        scrape_timeout = "2s"
        forward_to = [prometheus.remote_write.mimir.receiver]
        job_name = "mythical"
    }

    // Pyroscope receiver for profiling data
    pyroscope.receive_http "mythical" {
        http {
            listen_address = "0.0.0.0"
            listen_port = "4040"
        }
        forward_to = [pyroscope.write.mythical.receiver]
    }

    pyroscope.write "mythical" {
        endpoint {
            url = "http://{{ include "grafana-mltp-stack.fullname" . }}-pyroscope:4040"
        }
    }
    {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "grafana-mltp-stack.fullname" . }}-alloy-endpoints
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
  labels:
    {{- include "grafana-mltp-stack.labels" . | nindent 4 }}
    {{- include "grafana-mltp-stack.componentLabels" "alloy" | nindent 4 }}
data:
  endpoints.json: |
    [
      {
        "name": "server",
        "port": 4000,
        "endpoints": ["unicorn", "manticore", "dragon"]
      }
    ]
{{- end }}
