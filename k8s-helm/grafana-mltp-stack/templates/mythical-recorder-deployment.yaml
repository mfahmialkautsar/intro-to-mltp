{{- if .Values.microservices.recorder.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "grafana-mltp-stack.fullname" . }}-mythical-recorder
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "grafana-mltp-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: mythical-recorder
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "grafana-mltp-stack.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: mythical-recorder
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/alloy-configmap.yaml") . | sha256sum }}
      labels:
        {{- include "grafana-mltp-stack.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: mythical-recorder
    spec:
      serviceAccountName: {{ include "grafana-mltp-stack.serviceAccountName" . }}
      {{- include "grafana-mltp-stack.podSecurityContext" . | nindent 6 }}
      initContainers:
        - name: wait-for-postgresql
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              until nc -z {{ include "grafana-mltp-stack.fullname" . }}-postgresql.{{ .Values.global.namespace }}.svc.cluster.local {{ .Values.infrastructure.postgresql.ports.postgres }}; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
        - name: wait-for-rabbitmq
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              until nc -z mythical-queue.{{ .Values.global.namespace }}.svc.cluster.local {{ .Values.infrastructure.rabbitmq.ports.amqp }}; do
                echo "Waiting for RabbitMQ to be ready..."
                sleep 2
              done
              echo "RabbitMQ is ready!"
      containers:
        - name: mythical-recorder
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
          image: "{{ .Values.microservices.recorder.image.repository }}:{{ .Values.microservices.recorder.image.tag }}"
          imagePullPolicy: {{ .Values.microservices.recorder.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.microservices.recorder.ports.http }}
              protocol: TCP
          env:
            - name: NAMESPACE
              value: {{ .Values.microservices.recorder.env.namespace | quote }}
            - name: LOGS_TARGET
              value: {{ .Values.microservices.recorder.env.logsTarget | quote }}
            - name: TRACING_COLLECTOR_HOST
              value: {{ include "grafana-mltp-stack.fullname" . }}-alloy.{{ .Values.global.namespace }}.svc.cluster.local
            - name: TRACING_COLLECTOR_PORT
              value: {{ .Values.microservices.recorder.env.tracingCollectorPort | quote }}
            - name: PROFILE_COLLECTOR_HOST
              value: {{ include "grafana-mltp-stack.fullname" . }}-alloy.{{ .Values.global.namespace }}.svc.cluster.local
            - name: PROFILE_COLLECTOR_PORT
              value: {{ .Values.microservices.recorder.env.profileCollectorPort | quote }}
            - name: OTEL_EXPORTER_OTLP_TRACES_INSECURE
              value: {{ .Values.microservices.recorder.env.otelExporterOtlpTracesInsecure | quote }}
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: {{ .Values.microservices.recorder.env.otelResourceAttributes | quote }}
            - name: POSTGRES_HOST
              value: {{ include "grafana-mltp-stack.fullname" . }}-postgresql.{{ .Values.global.namespace }}.svc.cluster.local
            - name: POSTGRES_PORT
              value: {{ .Values.infrastructure.postgresql.ports.postgres | quote }}
            - name: POSTGRES_DB
              value: "mythical"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: {{ .Values.infrastructure.postgresql.auth.postgresPassword | quote }}
            - name: RABBITMQ_HOST
              value: mythical-queue.{{ .Values.global.namespace }}.svc.cluster.local
            - name: RABBITMQ_PORT
              value: {{ .Values.infrastructure.rabbitmq.ports.amqp | quote }}
          livenessProbe:
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.microservices.recorder.resources | nindent 12 }}
      {{- with .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
